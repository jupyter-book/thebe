{"version":3,"file":"1081.index.js","mappings":"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","sources":["webpack://thebe/../../node_modules/@lezer/markdown/dist/index.js","webpack://thebe/../../node_modules/@codemirror/lang-markdown/dist/index.js"],"sourcesContent":["import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        return new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"Autolink\"] = 33] = \"Autolink\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n    Type[Type[\"URL\"] = 44] = \"URL\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* RefStage.Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* RefStage.Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* RefStage.Link */ || this.stage == 3 /* RefStage.Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* RefStage.Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* RefStage.Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* RefStage.Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* RefStage.Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* RefStage.Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* RefStage.Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// For reused nodes on gaps, we can't directly put the original\n        /// node into the tree, since that may be bitter than its parent.\n        /// When this happens, we create a dummy tree that is replaced by\n        /// the proper node in `injectGaps` @internal\n        this.reusePlaceholders = new Map;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            for (let markI = 0;;) {\n                let next = line.depth < this.stack.length ? this.stack[this.stack.length - 1] : null;\n                while (markI < line.markers.length && (!next || line.markers[markI].from < next.end)) {\n                    let mark = line.markers[markI++];\n                    this.addNode(mark.type, mark.from, mark.to);\n                }\n                if (!next)\n                    break;\n                this.finishContext();\n            }\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        this.absoluteLineStart += taken;\n        this.lineStart = toRelative(this.absoluteLineStart, this.ranges);\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ?\n            injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.reusePlaceholders) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dummies) {\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node, reuse = dummies.get(ch.tree);\n        if (reuse) {\n            node = reuse;\n        }\n        else if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dummies);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]],\n        top: name == \"Document\"\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url) {\n            return cx.append(elt(Type.Autolink, start, start + 1 + url[0].length, [\n                elt(Type.LinkMark, start, start + 1),\n                // url[0] includes the closing bracket, so exclude it from this slice\n                elt(Type.URL, start + 1, start + url[0].length),\n                elt(Type.LinkMark, start + url[0].length, start + 1 + url[0].length)\n            ]));\n        }\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (canClose ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Mark.Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Mark.Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0 /* Mark.None */;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            // The destination and title must be separated by whitespace\n            if (pos != dest.to) {\n                title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n                if (title)\n                    pos = cx.skipSpace(title.to);\n            }\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Mark.Open */ : 0 /* Mark.None */) | (close ? 2 /* Mark.Close */ : 0 /* Mark.None */)));\n    }\n    /// Returns true when there is an unmatched link or image opening\n    /// token before the current position.\n    get hasOpenLink() {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart))\n                return true;\n        }\n        return false;\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Mark.Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Mark.Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Mark.Open */) || (part.side & 2 /* Mark.Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            let pos = toRelative(cur.from - off, cx.ranges);\n            if (cur.to - off <= cx.ranges[cx.rangeI].to) { // Fits in current range\n                cx.addNode(cur.tree, pos);\n            }\n            else {\n                let dummy = new Tree(cx.parser.nodeSet.types[Type.Paragraph], [], [], 0, cx.block.hashProp);\n                cx.reusePlaceholders.set(dummy, cur.tree);\n                cx.addNode(dummy, pos);\n            }\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\n// Convert an input-stream-relative position to a\n// Markdown-doc-relative position by subtracting the size of all input\n// gaps before `abs`.\nfunction toRelative(abs, ranges) {\n    let pos = abs;\n    for (let i = 1; i < ranges.length; i++) {\n        let gapFrom = ranges[i - 1].to, gapTo = ranges[i].from;\n        if (gapFrom < abs)\n            pos -= gapTo - gapFrom;\n    }\n    return pos;\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    \"URL Autolink\": tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\][ \\t]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\nconst autolinkRE = /(www\\.)|(https?:\\/\\/)|([\\w.+-]+@)|(mailto:|xmpp:)/gy;\nconst urlRE = /[\\w-]+(\\.[\\w-]+)+(\\/[^\\s<]*)?/gy;\nconst lastTwoDomainWords = /[\\w-]+\\.[\\w-]+($|\\/)/;\nconst emailRE = /[\\w.+-]+@[\\w-]+(\\.[\\w.-]+)+/gy;\nconst xmppResourceRE = /\\/[a-zA-Z\\d@.]+/gy;\nfunction count(str, from, to, ch) {\n    let result = 0;\n    for (let i = from; i < to; i++)\n        if (str[i] == ch)\n            result++;\n    return result;\n}\nfunction autolinkURLEnd(text, from) {\n    urlRE.lastIndex = from;\n    let m = urlRE.exec(text);\n    if (!m || lastTwoDomainWords.exec(m[0])[0].indexOf(\"_\") > -1)\n        return -1;\n    let end = from + m[0].length;\n    for (;;) {\n        let last = text[end - 1], m;\n        if (/[?!.,:*_~]/.test(last) ||\n            last == \")\" && count(text, from, end, \")\") > count(text, from, end, \"(\"))\n            end--;\n        else if (last == \";\" && (m = /&(?:#\\d+|#x[a-f\\d]+|\\w+);$/.exec(text.slice(from, end))))\n            end = from + m.index;\n        else\n            break;\n    }\n    return end;\n}\nfunction autolinkEmailEnd(text, from) {\n    emailRE.lastIndex = from;\n    let m = emailRE.exec(text);\n    if (!m)\n        return -1;\n    let last = m[0][m[0].length - 1];\n    return last == \"_\" || last == \"-\" ? -1 : from + m[0].length - (last == \".\" ? 1 : 0);\n}\n/// Extension that implements autolinking for\n/// `www.`/`http://`/`https://`/`mailto:`/`xmpp:` URLs and email\n/// addresses.\nconst Autolink = {\n    parseInline: [{\n            name: \"Autolink\",\n            parse(cx, next, absPos) {\n                let pos = absPos - cx.offset;\n                autolinkRE.lastIndex = pos;\n                let m = autolinkRE.exec(cx.text), end = -1;\n                if (!m)\n                    return -1;\n                if (m[1] || m[2]) { // www., http://\n                    end = autolinkURLEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && cx.hasOpenLink) {\n                        let noBracket = /([^\\[\\]]|\\[[^\\]]*\\])*/.exec(cx.text.slice(pos, end));\n                        end = pos + noBracket[0].length;\n                    }\n                }\n                else if (m[3]) { // email address\n                    end = autolinkEmailEnd(cx.text, pos);\n                }\n                else { // mailto:/xmpp:\n                    end = autolinkEmailEnd(cx.text, pos + m[0].length);\n                    if (end > -1 && m[0] == \"xmpp:\") {\n                        xmppResourceRE.lastIndex = end;\n                        m = xmppResourceRE.exec(cx.text);\n                        if (m)\n                            end = m.index + m[0].length;\n                    }\n                }\n                if (end < 0)\n                    return -1;\n                cx.addElement(cx.elt(\"URL\", absPos, end + cx.offset));\n                return end + cx.offset;\n            }\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList), [`Strikethrough`](#Strikethrough), and\n/// [`Autolink`](#Autolink).\nconst GFM = [Table, TaskList, Strikethrough, Autolink];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { Autolink, BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n","import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [];\n    for (let cur = node; cur && cur.name != \"Document\"; cur = cur.parent) {\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\" || cur.name == \"FencedCode\")\n            nodes.push(cur);\n    }\n    let context = [];\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"FencedCode\") {\n            context.push(new Context(node, startPos, startPos, \"\", \"\", \"\", null));\n        }\n        else if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlNoMatch.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n"],"names":["Type","CompositeBlock","create","type","value","from","parentHash","end","constructor","hash","children","positions","this","hashProp","contextHash","addChild","child","pos","prop","length","push","toTree","nodeSet","last","Math","max","types","balance","makeTree","none","LeafBlock","start","content","marks","parsers","Line","text","baseIndent","basePos","depth","markers","indent","next","forward","forwardInner","newPos","skipSpace","countIndent","charCodeAt","reset","pop","moveBase","to","moveBaseColumn","findColumn","addMarker","elt","i","goal","scrub","result","slice","skipForList","bl","cx","line","block","stack","size","OrderedList","isOrderedList","isBulletList","BulletList","isHorizontalRule","DefaultSkipMarkup","Blockquote","QuoteMark","lineStart","space","ListItem","_cx","Document","ch","skipSpaceBack","isFencedCode","isBlockquote","breaking","count","isSetextUnderline","inList","isAtxHeading","EmptyLine","CommentEnd","ProcessingEnd","HTMLBlockStyle","isHTMLBlock","rest","e","test","getListIndent","indentAfter","indented","addCodeText","CodeText","DefaultBlockParsers","LinkReference","undefined","IndentedCode","base","pendingMarks","nextLine","m","codeStart","filter","concat","addNode","buffer","writeElements","finish","CodeBlock","FencedCode","fenceEnd","len","infoFrom","infoTo","CodeMark","CodeInfo","first","textStart","textEnd","prevLineEnd","startContext","HorizontalRule","newBase","ListMark","ATXHeading","off","endOfSpace","after","buf","write","HeaderMark","parser","parseInline","node","ATXHeading1","HTMLBlock","trailing","nodeType","CommentBlock","ProcessingInstructionBlock","SetextHeading","LinkReferenceParser","leaf","stage","elts","advance","complete","addLeafElement","nextStage","parseLinkLabel","LinkMark","skip","title","parseLinkTitle","titleEnd","lineEnd","parseURL","SetextHeadingParser","underline","underlineMark","SetextHeading1","SetextHeading2","DefaultLeafBlocks","_","DefaultEndLeaf","p","scanLineResult","BlockContext","input","fragments","ranges","atEnd","reusePlaceholders","Map","stoppedAt","rangeI","absoluteLineStart","absoluteLineEnd","FragmentCursor","readLine","parsedPos","markI","mark","finishContext","reuseFragment","blockParsers","parse","leafBlockParsers","lines","stop","endLeafBlock","finishLeaf","stopAt","RangeError","moveTo","matches","taken","takeNodes","toRelative","moveRangeI","parentType","scanLine","r","lineChunkAt","textOffset","nextFrom","handler","skipContextMarkup","Error","chunk","lineChunks","eol","indexOf","startComposite","getNodeType","addElement","injectMarks","top","addGaps","tree","injectGaps","topNode","inline","Paragraph","TreeElement","Buffer","offset","dummies","rangeEnd","movePastNext","upto","inclusive","firstChild","nextSibling","reuse","get","propValues","MarkdownParser","blockNames","inlineParsers","inlineNames","wrappers","super","nodeTypes","Object","t","name","id","createParse","w","configure","spec","config","resolveConfig","nonEmpty","defineNodes","assign","styles","s","composite","style","some","group","define","props","Array","isArray","extend","remove","rm","parseBlock","found","before","findName","splice","endLeaf","wrap","InlineContext","outer","char","token","resolveMarkers","a","conf","conc","b","wrapA","wrapB","inner","names","Escape","nodes","writeTo","build","reused","topID","Element","startOff","EmphasisUnderscore","resolve","EmphasisAsterisk","LinkStart","ImageStart","InlineDelimiter","side","Punctuation","RegExp","DefaultInline","escaped","Escapable","append","Entity","exec","InlineCode","curSize","HTMLTag","url","Autolink","URL","comment","Comment","procInst","ProcessingInstruction","Emphasis","pBefore","pAfter","sBefore","sAfter","leftFlanking","rightFlanking","canOpen","canClose","HardBreak","Link","Image","LinkEnd","parts","part","takeContent","link","finishLink","j","startPos","endPos","unshift","dest","label","LinkTitle","requireNonWS","min","LinkLabel","addDelimiter","open","close","hasOpenLink","emp","closeSize","k","element","findOpeningDelimiter","startIndex","elements","eI","NotLast","fragment","fragmentEnd","cursor","nextFragment","read","c","rPos","parent","childAfter","cur","fragEnd","openEnd","blockI","prevEnd","prevI","isAnonymous","dummy","set","is","abs","gapFrom","gapTo","markdownHighlighting","quote","contentSeparator","heading1","heading2","heading3","heading4","heading5","heading6","escape","character","emphasis","strong","list","monospace","processingInstruction","labelName","string","keys","map","n","leftOverSpace","nextPos","StrikethroughDelim","Strikethrough","strikethrough","parseRow","startI","cellStart","cellEnd","esc","parseCell","hasPipe","str","delimiterLine","TableParser","rows","lineText","firstRow","Table","heading","TaskParser","TaskList","atom","autolinkRE","urlRE","lastTwoDomainWords","emailRE","xmppResourceRE","autolinkEmailEnd","lastIndex","GFM","absPos","index","autolinkURLEnd","parseSubSuper","Superscript","special","Subscript","Emoji","match","data","commentTokens","headingProp","commonmark","add","isHeading","isList","state","doc","lineAt","findSectionEnd","headerNode","level","headerIndent","of","resolveInner","mkLang","commonmarkLanguage","markdownLanguage","Context","spaceBefore","spaceAfter","item","blank","maxWidth","marker","number","String","itemNumber","getContext","context","replace","sliceString","renumberList","changes","prev","insert","normalizeIndent","facet","insertNewlineContinueMarkup","dispatch","dont","changeByRange","range","empty","isActiveAt","emptyLine","second","getChild","delTo","blankLine","lineBreak","prevLine","quoted","continued","charAt","line1","line2","nonTightList","update","scrollIntoView","userEvent","isMark","deleteMarkupBackward","scan","childBefore","lastChild","contextNodeForDelete","spaceEnd","markdownKeymap","key","run","htmlNoMatch","html","matchClosingTags","markdown","codeLanguages","defaultCodeLanguage","addKeymap","completeHTMLTags","defaultCode","extensions","support","language","codeParser","languages","defaultLanguage","info","matchLanguageName","getSkippingParser","load","htmlParser","overlay","infoNode","parseCode","high","lang","autocomplete","htmlTagCompletion","sliceDoc","isTop","options","htmlTagCompletions","validFor","_tagCompletions","htmlCompletionSource"],"sourceRoot":""}