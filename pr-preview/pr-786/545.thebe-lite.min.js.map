{"version":3,"file":"545.thebe-lite.min.js","mappings":"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","sources":["webpack://thebe-lite/../../node_modules/proxy-target/esm/types.js","webpack://thebe-lite/../../node_modules/coincident/esm/channel.js","webpack://thebe-lite/../../node_modules/proxy-target/esm/traps.js","webpack://thebe-lite/../../node_modules/coincident/esm/bridge.js","webpack://thebe-lite/../../node_modules/coincident/esm/index.js","webpack://thebe-lite/../../node_modules/comlink/dist/esm/comlink.mjs","webpack://thebe-lite/../../node_modules/@jupyterlite/kernel/lib/kernel.js","webpack://thebe-lite/../../node_modules/@jupyterlite/pyodide-kernel/lib/kernel.js"],"sourcesContent":["export const ARRAY     = 'array';\nexport const BIGINT    = 'bigint';\nexport const BOOLEAN   = 'boolean';\nexport const FUNCTION  = 'function';\nexport const NULL      = 'null';\nexport const NUMBER    = 'number';\nexport const OBJECT    = 'object';\nexport const STRING    = 'string';\nexport const SYMBOL    = 'symbol';\nexport const UNDEFINED = 'undefined';\n","// ⚠️ AUTOMATICALLY GENERATED - DO NOT CHANGE\nexport const CHANNEL = '64e10b34-2bf7-4616-9668-f99de5aa046e';\n\nexport const MAIN = 'M' + CHANNEL;\nexport const THREAD = 'T' + CHANNEL;\n","export const APPLY                        = 'apply';\nexport const CONSTRUCT                    = 'construct';\nexport const DEFINE_PROPERTY              = 'defineProperty';\nexport const DELETE_PROPERTY              = 'deleteProperty';\nexport const GET                          = 'get';\nexport const GET_OWN_PROPERTY_DESCRIPTOR  = 'getOwnPropertyDescriptor';\nexport const GET_PROTOTYPE_OF             = 'getPrototypeOf';\nexport const HAS                          = 'has';\nexport const IS_EXTENSIBLE                = 'isExtensible';\nexport const OWN_KEYS                     = 'ownKeys';\nexport const PREVENT_EXTENSION            = 'preventExtensions';\nexport const SET                          = 'set';\nexport const SET_PROTOTYPE_OF             = 'setPrototypeOf';\n","// The goal of this file is to normalize SAB\n// at least in main -> worker() use cases.\n// This still cannot possibly solve the sync\n// worker -> main() use case if SharedArrayBuffer\n// is not available or usable.\n\nimport {CHANNEL} from './channel.js';\n\nconst {isArray} = Array;\n\nlet {SharedArrayBuffer, window} = globalThis;\nlet {notify, wait, waitAsync} = Atomics;\nlet postPatched = null;\n\n// This is needed for some version of Firefox\nif (!waitAsync) {\n  waitAsync = buffer => ({\n    value: new Promise(onmessage => {\n      // encodeURIComponent('onmessage=({data:b})=>(Atomics.wait(b,0),postMessage(0))')\n      let w = new Worker('data:application/javascript,onmessage%3D(%7Bdata%3Ab%7D)%3D%3E(Atomics.wait(b%2C0)%2CpostMessage(0))');\n      w.onmessage = onmessage;\n      w.postMessage(buffer);\n    })\n  });\n}\n\n// Monkey-patch SharedArrayBuffer if needed\ntry {\n  new SharedArrayBuffer(4);\n}\ncatch (_) {\n  SharedArrayBuffer = ArrayBuffer;\n\n  const ids = new WeakMap;\n  // patch only main -> worker():async use case\n  if (window) {\n    const resolvers = new Map;\n    const {prototype: {postMessage}} = Worker;\n\n    const listener = event => {\n      const details = event.data?.[CHANNEL];\n      if (!isArray(details)) {\n        event.stopImmediatePropagation();\n        const { id, sb } = details;\n        resolvers.get(id)(sb);\n      }\n    };\n\n    postPatched = function (data, ...rest) {\n      const details = data?.[CHANNEL];\n      if (isArray(details)) {\n        const [id, sb] = details;\n        ids.set(sb, id);\n        this.addEventListener('message', listener);\n      }\n      return postMessage.call(this, data, ...rest);\n    };\n\n    waitAsync = sb => ({\n      value: new Promise(resolve => {\n        resolvers.set(ids.get(sb), resolve);\n      }).then(buff => {\n        resolvers.delete(ids.get(sb));\n        ids.delete(sb);\n        for (let i = 0; i < buff.length; i++) sb[i] = buff[i];\n        return 'ok';\n      })\n    });\n  }\n  else {\n    const as = (id, sb) => ({[CHANNEL]: { id, sb }});\n\n    notify = sb => {\n      postMessage(as(ids.get(sb), sb));\n    };\n\n    addEventListener('message', event => {\n      const details = event.data?.[CHANNEL];\n      if (isArray(details)) {\n        const [id, sb] = details;\n        ids.set(sb, id);\n      }\n    });\n  }\n}\n\nexport {SharedArrayBuffer, isArray, notify, postPatched, wait, waitAsync};\n","/*! (c) Andrea Giammarchi - ISC */\n\nimport {FUNCTION} from 'proxy-target/types';\n\nimport {CHANNEL} from './channel.js';\nimport {GET, HAS, SET} from './shared/traps.js';\n\nimport {SharedArrayBuffer, isArray, notify, postPatched, wait, waitAsync} from './bridge.js';\n\n// just minifier friendly for Blob Workers' cases\nconst {Int32Array, Map, Uint16Array} = globalThis;\n\n// common constants / utilities for repeated operations\nconst {BYTES_PER_ELEMENT: I32_BYTES} = Int32Array;\nconst {BYTES_PER_ELEMENT: UI16_BYTES} = Uint16Array;\n\nconst waitInterrupt = (sb, delay, handler) => {\n  while (wait(sb, 0, 0, delay) === 'timed-out')\n    handler();\n};\n\n// retain buffers to transfer\nconst buffers = new WeakSet;\n\n// retain either main threads or workers global context\nconst context = new WeakMap;\n\nconst syncResult = {value: {then: fn => fn()}};\n\n// used to generate a unique `id` per each worker `postMessage` \"transaction\"\nlet uid = 0;\n\n/**\n * @typedef {Object} Interrupt used to sanity-check interrupts while waiting synchronously.\n * @prop {function} [handler] a callback invoked every `delay` milliseconds.\n * @prop {number} [delay=42] define `handler` invokes in terms of milliseconds.\n */\n\n/**\n * Create once a `Proxy` able to orchestrate synchronous `postMessage` out of the box.\n * @param {globalThis | Worker} self the context in which code should run\n * @param {{parse: (serialized: string) => any, stringify: (serializable: any) => string, transform?: (value:any) => any, interrupt?: () => void | Interrupt}} [JSON] an optional `JSON` like interface to `parse` or `stringify` content with extra `transform` ability.\n * @returns {ProxyHandler<globalThis> | ProxyHandler<Worker>}\n */\nconst coincident = (self, {parse = JSON.parse, stringify = JSON.stringify, transform, interrupt} = JSON) => {\n  // create a Proxy once for the given context (globalThis or Worker instance)\n  if (!context.has(self)) {\n    // ensure no SAB gets a chance to pass through this call\n    const sendMessage = postPatched || self.postMessage;\n    // ensure the CHANNEL and data are posted correctly\n    const post = (transfer, ...args) => sendMessage.call(self, {[CHANNEL]: args}, {transfer});\n\n    const handler = typeof interrupt === FUNCTION ? interrupt : interrupt?.handler;\n    const delay = interrupt?.delay || 42;\n    const decoder = new TextDecoder('utf-16');\n\n    // automatically uses sync wait (worker -> main)\n    // or fallback to async wait (main -> worker)\n    const waitFor = (isAsync, sb) => isAsync ?\n      waitAsync(sb, 0) :\n      ((handler ? waitInterrupt(sb, delay, handler) : wait(sb, 0)), syncResult);\n\n    // prevent Harakiri https://github.com/WebReflection/coincident/issues/18\n    let seppuku = false;\n\n    context.set(self, new Proxy(new Map, {\n      // there is very little point in checking prop in proxy for this very specific case\n      // and I don't want to orchestrate a whole roundtrip neither, as stuff would fail\n      // regardless if from Worker we access non existent Main callback, and vice-versa.\n      // This is here mostly to guarantee that if such check is performed, at least the\n      // get trap goes through and then it's up to developers guarantee they are accessing\n      // stuff that actually exists elsewhere.\n      [HAS]: (_, action) => typeof action === 'string' && !action.startsWith('_'),\n\n      // worker related: get any utility that should be available on the main thread\n      [GET]: (_, action) => action === 'then' ? null : ((...args) => {\n        // transaction id\n        const id = uid++;\n\n        // first contact: just ask for how big the buffer should be\n        // the value would be stored at index [1] while [0] is just control\n        let sb = new Int32Array(new SharedArrayBuffer(I32_BYTES * 2));\n\n        // if a transfer list has been passed, drop it from args\n        let transfer = [];\n        if (buffers.has(args.at(-1) || transfer))\n          buffers.delete(transfer = args.pop());\n\n        // ask for invoke with arguments and wait for it\n        post(transfer, id, sb, action, transform ? args.map(transform) : args);\n\n        // helps deciding how to wait for results\n        const isAsync = self !== globalThis;\n\n        // warn users about possible deadlock still allowing them\n        // to explicitly `proxy.invoke().then(...)` without blocking\n        let deadlock = 0;\n        if (seppuku && isAsync)\n          deadlock = setTimeout(console.warn, 1000, `💀🔒 - Possible deadlock if proxy.${action}(...args) is awaited`);\n\n        return waitFor(isAsync, sb).value.then(() => {\n          clearTimeout(deadlock);\n\n          // commit transaction using the returned / needed buffer length\n          const length = sb[1];\n\n          // filter undefined results\n          if (!length) return;\n\n          // calculate the needed ui16 bytes length to store the result string\n          const bytes = UI16_BYTES * length;\n\n          // round up to the next amount of bytes divided by 4 to allow i32 operations\n          sb = new Int32Array(new SharedArrayBuffer(bytes + (bytes % I32_BYTES)));\n\n          // ask for results and wait for it\n          post([], id, sb);\n          return waitFor(isAsync, sb).value.then(() => parse(\n            decoder.decode(new Uint16Array(sb.buffer).slice(0, length)))\n          );\n        });\n      }),\n\n      // main thread related: react to any utility a worker is asking for\n      [SET](actions, action, callback) {\n        const type = typeof callback;\n        if (type !== FUNCTION)\n          throw new Error(`Unable to assign ${action} as ${type}`);\n        // lazy event listener and logic handling, triggered once by setters actions\n        if (!actions.size) {\n          // maps results by `id` as they are asked for\n          const results = new Map;\n          // add the event listener once (first defined setter, all others work the same)\n          self.addEventListener('message', async (event) => {\n            // grub the very same library CHANNEL; ignore otherwise\n            const details = event.data?.[CHANNEL];\n            if (isArray(details)) {\n              // if early enough, avoid leaking data to other listeners\n              event.stopImmediatePropagation();\n              const [id, sb, ...rest] = details;\n              let error;\n              // action available: it must be defined/known on the main thread\n              if (rest.length) {\n                const [action, args] = rest;\n                if (actions.has(action)) {\n                  seppuku = true;\n                  try {\n                    // await for result either sync or async and serialize it\n                    const result = await actions.get(action)(...args);\n                    if (result !== void 0) {\n                      const serialized = stringify(transform ? transform(result) : result);\n                      // store the result for \"the very next\" event listener call\n                      results.set(id, serialized);\n                      // communicate the required SharedArrayBuffer length out of the\n                      // resulting serialized string\n                      sb[1] = serialized.length;\n                    }\n                  }\n                  catch (_) {\n                    error = _;\n                  }\n                  finally {\n                    seppuku = false;\n                  }\n                }\n                // unknown action should be notified as missing on the main thread\n                else {\n                  error = new Error(`Unsupported action: ${action}`);\n                }\n                // unlock the wait lock later on\n                sb[0] = 1;\n              }\n              // no action means: get results out of the well known `id`\n              // wait lock automatically unlocked here as no `0` value would\n              // possibly ever land at index `0`\n              else {\n                const result = results.get(id);\n                results.delete(id);\n                // populate the SharedArrayBuffer with utf-16 chars code\n                for (let ui16a = new Uint16Array(sb.buffer), i = 0; i < result.length; i++)\n                  ui16a[i] = result.charCodeAt(i);\n              }\n              // release te worker waiting either the length or the result\n              notify(sb, 0);\n              if (error) throw error;\n            }\n          });\n        }\n        // store this action callback allowing the setter in the process\n        return !!actions.set(action, callback);\n      }\n    }));\n  }\n  return context.get(self);\n};\n\ncoincident.transfer = (...args) => (buffers.add(args), args);\n\nexport default coincident;\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        this._parent = undefined;\n        const { id, name, location, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._location = location;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The location in the virtual filesystem from which the kernel was started.\n     */\n    get location() {\n        return this._location;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Get the last parent message (mimic ipykernel's get_parent)\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        this._parent = msg;\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._execute(msg);\n                break;\n            case 'input_reply':\n                this.inputReply(msg.content);\n                break;\n            case 'inspect_request':\n                await this._inspect(msg);\n                break;\n            case 'is_complete_request':\n                await this._isCompleteRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            case 'comm_open':\n                await this.commOpen(msg);\n                break;\n            case 'comm_msg':\n                await this.commMsg(msg);\n                break;\n            case 'comm_close':\n                await this.commClose(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The display_data content.\n     */\n    displayData(content, parentHeader = undefined) {\n        var _a, _b;\n        // Make sure metadata is always set\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        content.metadata = (_a = content.metadata) !== null && _a !== void 0 ? _a : {};\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `input_request` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The input_request content.\n     */\n    inputRequest(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'stdin',\n            msgType: 'input_request',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param parentHeader The parent header.\n     * @param content The execute result content.\n     */\n    publishExecuteResult(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'execute_result',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The error content.\n     */\n    publishExecuteError(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'error',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `update_display_data` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The update_display_data content.\n     */\n    updateDisplayData(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'update_display_data',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `clear_output` message to the client.\n     *\n     * @param parentHeader The parent header.\n     * @param content The clear_output content.\n     */\n    clearOutput(content, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'clear_output',\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `comm` message to the client.\n     *\n     * @param .\n     */\n    handleComm(type, content, metadata, buffers, parentHeader = undefined) {\n        var _a;\n        const parentHeaderValue = typeof parentHeader !== 'undefined' ? parentHeader : this._parentHeader;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: type,\n            // TODO: better handle this\n            session: (_a = parentHeaderValue === null || parentHeaderValue === void 0 ? void 0 : parentHeaderValue.session) !== null && _a !== void 0 ? _a : '',\n            parentHeader: parentHeaderValue,\n            content,\n            metadata,\n            buffers,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy',\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount,\n            },\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an execute_request message.\n     *\n     * @param msg The parent message.\n     */\n    async _execute(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        if (content.store_history) {\n            this._executionCount++;\n        }\n        // TODO: handle differently\n        this._parentHeader = executeMsg.header;\n        this._executeInput(executeMsg);\n        if (content.store_history) {\n            this._history.push([0, 0, content.code]);\n        }\n        const reply = await this.executeRequest(executeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: executeMsg.header,\n            session: msg.header.session,\n            content: reply,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an inspect_request message\n     *\n     * @param msg The parent message.\n     */\n    async _inspect(msg) {\n        const inspectMsg = msg;\n        const content = await this.inspectRequest(inspectMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'inspect_reply',\n            parentHeader: inspectMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an is_complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _isCompleteRequest(msg) {\n        const isCompleteMsg = msg;\n        const content = await this.isCompleteRequest(isCompleteMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'is_complete_reply',\n            parentHeader: isCompleteMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content,\n        });\n        this._sendMessage(message);\n    }\n}\n//# sourceMappingURL=kernel.js.map","import coincident from 'coincident';\nimport { wrap } from 'comlink';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { allJSONUrl, pipliteWheelUrl } from './_pypi';\nimport { DriveContentsProcessor, } from '@jupyterlite/contents';\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyodideKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        super(options);\n        this._ready = new PromiseDelegate();\n        this._worker = this.initWorker(options);\n        this._remoteKernel = this.initRemote(options);\n        this._contentsManager = options.contentsManager;\n    }\n    /**\n     * Load the worker.\n     *\n     * ### Note\n     *\n     * Subclasses must implement this typographically almost _exactly_ for\n     * webpack to find it.\n     */\n    initWorker(options) {\n        if (crossOriginIsolated) {\n            return new Worker(new URL('./coincident.worker.js', import.meta.url), {\n                type: 'module',\n            });\n        }\n        else {\n            return new Worker(new URL('./comlink.worker.js', import.meta.url), {\n                type: 'module',\n            });\n        }\n    }\n    /**\n     * Initialize the remote kernel.\n     * Use coincident if crossOriginIsolated, comlink otherwise\n     * See the two following issues for more context:\n     *  - https://github.com/jupyterlite/jupyterlite/issues/1424\n     *  - https://github.com/jupyterlite/pyodide-kernel/pull/126\n     */\n    initRemote(options) {\n        let remote;\n        if (crossOriginIsolated) {\n            remote = coincident(this._worker);\n            remote.processWorkerMessage = this._processWorkerMessage.bind(this);\n            // The coincident worker uses its own filesystem API:\n            remote.processDriveRequest = async (data) => {\n                if (!DriveContentsProcessor) {\n                    throw new Error('File system calls over Atomics.wait is only supported with jupyterlite>=0.4.0a3');\n                }\n                if (this._contentsProcessor === undefined) {\n                    this._contentsProcessor = new DriveContentsProcessor({\n                        contentsManager: this._contentsManager,\n                    });\n                }\n                return await this._contentsProcessor.processDriveRequest(data);\n            };\n        }\n        else {\n            remote = wrap(this._worker);\n            // we use the normal postMessage mechanism\n            this._worker.addEventListener('message', (ev) => {\n                var _a;\n                if (typeof ((_a = ev === null || ev === void 0 ? void 0 : ev.data) === null || _a === void 0 ? void 0 : _a._kernelMessage) !== 'undefined') {\n                    // only process non comlink messages\n                    this._processWorkerMessage(ev.data._kernelMessage);\n                }\n            });\n        }\n        const remoteOptions = this.initRemoteOptions(options);\n        remote.initialize(remoteOptions).then(this._ready.resolve.bind(this._ready));\n        return remote;\n    }\n    initRemoteOptions(options) {\n        const { pyodideUrl } = options;\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const baseUrl = PageConfig.getBaseUrl();\n        const pipliteUrls = [...(options.pipliteUrls || []), allJSONUrl.default];\n        const disablePyPIFallback = !!options.disablePyPIFallback;\n        return {\n            baseUrl,\n            pyodideUrl,\n            indexUrl,\n            pipliteWheelUrl: options.pipliteWheelUrl || pipliteWheelUrl.default,\n            pipliteUrls,\n            disablePyPIFallback,\n            location: this.location,\n            mountDrive: options.mountDrive,\n            loadPyodideOptions: options.loadPyodideOptions || {},\n        };\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._worker.terminate();\n        this._worker = null;\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        if (!msg.type) {\n            return;\n        }\n        switch (msg.type) {\n            case 'stream': {\n                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };\n                this.stream(bundle, msg.parentHeader);\n                break;\n            }\n            case 'input_request': {\n                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };\n                this.inputRequest(bundle, msg.parentHeader);\n                break;\n            }\n            case 'display_data': {\n                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };\n                this.displayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'update_display_data': {\n                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };\n                this.updateDisplayData(bundle, msg.parentHeader);\n                break;\n            }\n            case 'clear_output': {\n                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };\n                this.clearOutput(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_result': {\n                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : {\n                    execution_count: 0,\n                    data: {},\n                    metadata: {},\n                };\n                this.publishExecuteResult(bundle, msg.parentHeader);\n                break;\n            }\n            case 'execute_error': {\n                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };\n                this.publishExecuteError(bundle, msg.parentHeader);\n                break;\n            }\n            case 'comm_msg':\n            case 'comm_open':\n            case 'comm_close': {\n                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);\n                break;\n            }\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3,\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8',\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org',\n                },\n            ],\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        await this.ready;\n        const result = await this._remoteKernel.execute(content, this.parent);\n        result.execution_count = this.executionCount;\n        return result;\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        return await this._remoteKernel.complete(content, this.parent);\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        return await this._remoteKernel.inspect(content, this.parent);\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        return await this._remoteKernel.isComplete(content, this.parent);\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        return await this._remoteKernel.commInfo(content, this.parent);\n    }\n    /**\n     * Send an `comm_open` message.\n     *\n     * @param msg - The comm_open message.\n     */\n    async commOpen(msg) {\n        return await this._remoteKernel.commOpen(msg, this.parent);\n    }\n    /**\n     * Send an `comm_msg` message.\n     *\n     * @param msg - The comm_msg message.\n     */\n    async commMsg(msg) {\n        return await this._remoteKernel.commMsg(msg, this.parent);\n    }\n    /**\n     * Send an `comm_close` message.\n     *\n     * @param close - The comm_close message.\n     */\n    async commClose(msg) {\n        return await this._remoteKernel.commClose(msg, this.parent);\n    }\n    /**\n     * Send an `input_reply` message.\n     *\n     * @param content - The content of the reply.\n     */\n    async inputReply(content) {\n        return await this._remoteKernel.inputReply(content, this.parent);\n    }\n}\n"],"names":["FUNCTION","CHANNEL","GET","HAS","SET","isArray","Array","SharedArrayBuffer","window","globalThis","notify","wait","waitAsync","Atomics","postPatched","buffer","value","Promise","onmessage","w","Worker","postMessage","_","ArrayBuffer","ids","WeakMap","resolvers","Map","prototype","listener","event","details","data","stopImmediatePropagation","id","sb","get","rest","set","this","addEventListener","call","resolve","then","buff","delete","i","length","as","Int32Array","BYTES_PER_ELEMENT","I32_BYTES","UI16_BYTES","Uint16Array","buffers","WeakSet","context","syncResult","fn","uid","coincident","self","parse","JSON","stringify","transform","interrupt","has","sendMessage","post","transfer","args","handler","delay","decoder","TextDecoder","waitFor","isAsync","waitInterrupt","seppuku","Proxy","action","startsWith","at","pop","map","deadlock","setTimeout","console","warn","clearTimeout","bytes","decode","slice","actions","callback","type","Error","size","results","async","error","result","serialized","ui16a","charCodeAt","add","proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","isError","message","name","stack","Object","assign","ep","allowedOrigins","ev","origin","allowedOrigin","RegExp","test","isAllowedOrigin","path","argumentList","fromWireValue","returnValue","parent","reduce","prop","rawValue","apply","proxy","transfers","transferCache","undefined","catch","wireValue","transferables","toWireValue","removeEventListener","closeEndPoint","TypeError","endpoint","constructor","isMessagePort","close","target","pendingListeners","resolver","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","_target","unregister","unregisterProxy","clear","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","concat","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","BaseKernel","options","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","_parent","location","_id","_name","_location","_sendMessage","ready","isDisposed","disposed","executionCount","parentHeader","dispose","emit","handleMessage","_busy","header","msg_type","_kernelInfo","_execute","inputReply","content","_inspect","_isCompleteRequest","_complete","_historyRequest","commOpen","commMsg","commClose","_idle","stream","_a","parentHeaderValue","KernelMessage","createMessage","channel","msgType","session","displayData","_b","metadata","inputRequest","publishExecuteResult","publishExecuteError","updateDisplayData","clearOutput","handleComm","execution_state","kernelInfoRequest","historyMsg","status","history","_executeInput","code","execution_count","executeMsg","store_history","push","reply","executeRequest","completeMsg","completeRequest","inspectMsg","inspectRequest","isCompleteMsg","isCompleteRequest","PyodideKernel","super","_ready","PromiseDelegate","_worker","initWorker","_remoteKernel","initRemote","_contentsManager","contentsManager","crossOriginIsolated","URL","remote","processWorkerMessage","_processWorkerMessage","processDriveRequest","_contentsProcessor","_kernelMessage","remoteOptions","initRemoteOptions","initialize","pyodideUrl","indexUrl","lastIndexOf","baseUrl","PageConfig","getBaseUrl","pipliteUrls","disablePyPIFallback","pipliteWheelUrl","mountDrive","loadPyodideOptions","terminate","promise","_c","_d","_e","_f","_g","bundle","text","prompt","password","transient","ename","evalue","traceback","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","banner","help_links","url","execute","complete","inspect","isComplete","commInfoRequest","commInfo"],"sourceRoot":""}